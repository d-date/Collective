{"ast":null,"code":"var _jsxFileName = \"/Users/haruta-masaki/projects/Collective/node_modules/react-native-fab/src/Touchable.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport { IS_ANDROID, IS_LT_LOLLIPOP, noop } from \"./utils\";\n\nvar Touchable = function Touchable(_ref) {\n  var onPress = _ref.onPress,\n      style = _ref.style,\n      buttonColor = _ref.buttonColor,\n      children = _ref.children;\n\n  if (IS_ANDROID && !IS_LT_LOLLIPOP) {\n    return React.createElement(TouchableNativeFeedback, {\n      background: TouchableNativeFeedback.SelectableBackgroundBorderless(),\n      onPress: onPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      }\n    }, React.createElement(View, {\n      style: [style, {\n        backgroundColor: buttonColor\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      }\n    }, children));\n  }\n\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    style: [style, {\n      backgroundColor: buttonColor\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    }\n  }, children);\n};\n\nTouchable.propTypes = {\n  onPress: PropTypes.func,\n  style: ViewPropTypes.style,\n  buttonColor: PropTypes.string,\n  children: PropTypes.node.isRequired\n};\nTouchable.defaultProps = {\n  onPress: noop,\n  style: {},\n  buttonColor: 'red'\n};\nexport default Touchable;","map":{"version":3,"sources":["/Users/haruta-masaki/projects/Collective/node_modules/react-native-fab/src/Touchable.js"],"names":["React","PropTypes","IS_ANDROID","IS_LT_LOLLIPOP","noop","Touchable","onPress","style","buttonColor","children","TouchableNativeFeedback","SelectableBackgroundBorderless","backgroundColor","propTypes","func","ViewPropTypes","string","node","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;AAOA,SACEC,UADF,EAEEC,cAFF,EAGEC,IAHF;;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAKZ;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,WAEI,QAFJA,WAEI;AAAA,MADJC,QACI,QADJA,QACI;;AACJ,MAAIP,UAAU,IAAI,CAACC,cAAnB,EAAmC;AACjC,WACE,oBAAC,uBAAD;AACE,MAAA,UAAU,EAAEO,uBAAuB,CAACC,8BAAxB,EADd;AAEE,MAAA,OAAO,EAAEL,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLC,KADK,EACE;AACLK,QAAAA,eAAe,EAAEJ;AADZ,OADF,CADT;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGC,QAPH,CAJF,CADF;AAgBD;;AAED,SACE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,KAAK,EAAE,CACLC,KADK,EACE;AACLK,MAAAA,eAAe,EAAEJ;AADZ,KADF,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGC,QARH,CADF;AAYD,CArCD;;AAuCAJ,SAAS,CAACQ,SAAV,GAAsB;AACpBP,EAAAA,OAAO,EAAEL,SAAS,CAACa,IADC;AAEpBP,EAAAA,KAAK,EAAEQ,aAAa,CAACR,KAFD;AAGpBC,EAAAA,WAAW,EAAEP,SAAS,CAACe,MAHH;AAIpBP,EAAAA,QAAQ,EAAER,SAAS,CAACgB,IAAV,CAAeC;AAJL,CAAtB;AAOAb,SAAS,CAACc,YAAV,GAAyB;AACvBb,EAAAA,OAAO,EAAEF,IADc;AAEvBG,EAAAA,KAAK,EAAE,EAFgB;AAGvBC,EAAAA,WAAW,EAAE;AAHU,CAAzB;AAMA,eAAeH,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  TouchableOpacity,\n  TouchableNativeFeedback,\n  ViewPropTypes,\n} from 'react-native';\nimport {\n  IS_ANDROID,\n  IS_LT_LOLLIPOP,\n  noop,\n} from './utils';\n\nconst Touchable = ({\n  onPress,\n  style,\n  buttonColor,\n  children,\n}) => {\n  if (IS_ANDROID && !IS_LT_LOLLIPOP) {\n    return (\n      <TouchableNativeFeedback\n        background={TouchableNativeFeedback.SelectableBackgroundBorderless()}\n        onPress={onPress}\n      >\n        <View\n          style={[\n            style, {\n              backgroundColor: buttonColor,\n            },\n          ]}\n        >\n          {children}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={[\n        style, {\n          backgroundColor: buttonColor,\n        },\n      ]}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\nTouchable.propTypes = {\n  onPress: PropTypes.func,\n  style: ViewPropTypes.style,\n  buttonColor: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nTouchable.defaultProps = {\n  onPress: noop,\n  style: {},\n  buttonColor: 'red',\n};\n\nexport default Touchable;\n"]},"metadata":{},"sourceType":"module"}